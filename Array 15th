#include <iostream>
#include <vector>
using namespace std;
 
int findRowIndex(vector<vector<int>> const &mat)
{
    // base case
    if (mat.size() == 0) {
        return 0;
    }
 
    // `M Ã— N` matrix
    int M = mat.size();
    int N = mat[0].size();
 
    // `(i, j)` stores the current row and column index
    int i, j;
 
    // stores row number with maximum index
    int row = -1;
 
    // start from the top-rightmost cell of the matrix
    i = 0, j = N - 1;
 
    while (i <= M - 1 && j >= 0)
    {
        // move left if the current cell has value 1
        if (mat[i][j]) {
            j--, row = i;   // update row number
        }
        else {              // otherwise, move down
            i++;
        }
    }
 
    return row + 1;
}
 
int main()
{
    vector<vector<int>> mat =
    {
        { 0, 0, 0, 1, 1 },
        { 0, 0, 1, 1, 1 },
        { 0, 0, 0, 0, 0 },
        { 0, 1, 1, 1, 1 },
        { 0, 0, 0, 0, 1 }
    };
 
    int rowIndex = findRowIndex(mat);
 
    // rowIndex = 0 means no 1's are present in the matrix
    if (rowIndex) {
        cout << "The Maximum 1's are present in the row " << rowIndex;
    }
 
    return 0;
}